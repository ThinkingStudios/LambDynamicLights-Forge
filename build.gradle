plugins {
    id 'dev.architectury.loom' version '1.4-SNAPSHOT'
    //id 'io.github.juuxel.loom-vineflower' version '1.+'
	id 'java-library'
	id 'maven-publish'
	id 'net.darkhax.curseforgegradle' version '1.+'
	id "com.modrinth.minotaur" version "2.+"
}

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"
base.archivesName = project.archives_base_name

// This field defines the Java version your mod target.
def targetJavaVersion = 17

logger.lifecycle("Preparing version ${version}...")

String getMCVersionString() {
	return project.minecraft_version
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name "Quilt"
		url "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name 'Terraformers'
		url 'https://maven.terraformersmc.com/releases/'
	}
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name 'grondag'
		url 'https://maven.dblsaiko.net/'
	}
	exclusiveContent {
		forRepository {
			maven {
				name "Modrinth"
				url "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		url "https://maven.neoforged.net/releases"
	}
}

loom {
	accessWidenerPath = file("src/main/resources/lambdynlights.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
	neoForge "net.neoforged:neoforge:${project.neoforge_version}"

	modImplementation "maven.modrinth:obsidianui:${project.spruceui_version}"

	modRuntimeOnly "maven.modrinth:embeddium:${project.sodium_version}"
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('META-INF/mods.toml') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName}" }
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")

	projectId = "${project.modrinth_id}"
	versionNumber = "neoforge-${project.version}"
	versionType = "alpha"
	changelog = file("CHANGELOG.md").getText('UTF-8')
	uploadFile = remapJar
	additionalFiles = [sourcesJar]
	gameVersions = ["1.20.2"]
	loaders = ["neoforge"]
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
	apiToken = System.getenv("CURSEFORGE_TOKEN")
	disableVersionDetection()

	def mainFile = upload(project.curseforge_id, remapJar)
	mainFile.displayName = "neoforge-${project.version}"
	mainFile.releaseType = "alpha"
	mainFile.changelog = file("CHANGELOG.md")
	mainFile.changelogType = "markdown"
	mainFile.addModLoader("NeoForge")
	mainFile.addJavaVersion("Java 17", "Java 18")
	mainFile.addGameVersion("1.20.2")

	def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
	sourcesFile.changelog = file("CHANGELOG.md")
	sourcesFile.changelogType = "markdown"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		mavenLocal()
	}
}
