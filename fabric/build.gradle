architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")
    modApi("maven.modrinth:obsidianui:${rootProject.obsidianui_version}-fabric")
    modCompileOnly("maven.modrinth:indium:${project.indium_version}")

    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }

    shadowBundle("com.electronwill.night-config:core:3.8.0")
    shadowBundle("com.electronwill.night-config:toml:3.8.0")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    relocate "com.electronwill.nightconfig", "${rootProject.maven_group}.shadow.nightconfig"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener.set(true)
    inputFile.set(shadowJar.archiveFile)
}

publisher {
    apiKeys {
        modrinth System.getenv("MODRINTH_TOKEN")
        curseforge System.getenv("CURSEFORGE_TOKEN")
    }

    setCurseID("${rootProject.curseforge_id}")
    setModrinthID("${rootProject.modrinth_id}")
    setVersionType("alpha")
    setChangelog(file("../CHANGELOG.md").getText("UTF-8"))
    setVersion("${rootProject.version}-fabric")
    setDisplayName("[Fabric] ${rootProject.version}")
    setGameVersions("1.21", "1.21.1")
    setLoaders("fabric")
    setCurseEnvironment("client")
    setArtifact(remapJar)
    addAdditionalFile(sourcesJar)

    modrinthDepends {
        required "obsidianui"
    }

    curseDepends {
        required "obsidianui"
    }
}
