architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge("net.neoforged:neoforge:${rootProject.neoforge_version}")
    modImplementation("maven.modrinth:obsidianui:${rootProject.obsidianui_version}-neoforge")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    atAccessWideners.add("ryoamiclights.accesswidener")
}

publisher {
    apiKeys {
        modrinth System.getenv("MODRINTH_TOKEN")
        curseforge System.getenv("CURSEFORGE_TOKEN")
    }

    setCurseID("${rootProject.curseforge_id}")
    setModrinthID("${rootProject.modrinth_id}")
    setVersionType("alpha")
    setChangelog(file("CHANGELOG.md").getText("UTF-8"))
    setVersion("${rootProject.version}-neoforge")
    setDisplayName("[NeoForge] ${rootProject.version}")
    setGameVersions("1.21", "1.21.1")
    setLoaders("neoforge")
    setCurseEnvironment("client")
    setArtifact(remapJar)
    addAdditionalFile(sourcesJar)

    modrinthDepends {
        required "obsidianui"
    }

    curseDepends {
        required "obsidianui"
    }
}
